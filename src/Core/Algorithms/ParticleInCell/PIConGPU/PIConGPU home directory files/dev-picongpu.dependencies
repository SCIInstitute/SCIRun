#General instructions: Install the Nvidia driver first, then the CUDA Toolkit, then run this script
#                      see https://forums.developer.nvidia.com/t/nvidia-driver-and-cuda-installation-sequence/60456
#
#                      Uncomment the 'sudo apt upgrade -y' statement below to perform a system upgrade as part of this installation

# Do an update
sudo apt update -y
#sudo apt upgrade -y
sudo apt autoremove -y

# Clean out prior installed directories
rm -rf $HOME/lib/openPMD-api $HOME/lib/pngwriter $HOME/lib/ADIOS2
rm -rf $HOME/src/openPMD-api $HOME/src/openPMD-api-build $HOME/src/picongpu $HOME/src/pngwriter $HOME/src/pngwriter-build $HOME/src/ADIOS2 $HOME/src/ADIOS2-build
rm -rf scratch
rm -rf picInputs

# Create directories
mkdir -p $HOME/src/openPMD-api $HOME/src/openPMD-api-build
mkdir -p $HOME/src/pngwriter $HOME/src/pngwriter-build
mkdir -p $HOME/src/ADIOS2 $HOME/src/ADIOS2-build
mkdir -p $HOME/lib/openPMD-api
mkdir -p $HOME/lib/pngwriter
mkdir -p $HOME/lib/ADIOS2
export SCRATCH=$HOME/scratch
mkdir -p $HOME/picInputs
mkdir -p $SCRATCH/runs

# Set variables and paths
export PICSRC=$HOME/src/picongpu
export PIC_EXAMPLES=$PICSRC/share/picongpu/examples

export PIC_BACKEND="omp2b:native"
#export PIC_BACKEND="cuda:61"
#export PIC_BACKEND="cuda:86"

export PATH=$PATH:$PICSRC:$PICSRC/bin:$PICSRC/src/tools/bin
export PYTHONPATH=$PICSRC/lib/python:$PYTHONPATH                #Verify this is needed

# Load gcc
sudo apt install -y build-essential

# Load cmake                                          #Install the Debian APT Repo first to get Cmake v3.22.2
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
sudo apt update
sudo apt install -y cmake file cmake-curses-gui

# Load cuda toolkit                                   #Instructions are at the bottom of the page

# Load openmpi
sudo apt install -y libopenmpi-dev

# Load zlib
sudo apt install zlib1g-dev

# Load boost
sudo apt install -y libboost-program-options-dev libboost-filesystem-dev libboost-system-dev libboost-thread-dev libboost-chrono-dev libboost-atomic-dev libboost-date-time-dev libboost-math-dev libboost-serialization-dev libboost-fiber-dev libboost-context-dev

# Load git
sudo apt install -y git

# Load rsync
sudo apt install rsync

# Retrieve PIConGPU source code and change to the -dev branch
cd $HOME/src
git clone https://github.com/ComputationalRadiationPhysics/picongpu.git
cd picongpu
git checkout dev
cd $HOME

# Load libpng
sudo apt install -y libpng-dev

# Load pngwriter
cd ~/src
git clone https://github.com/pngwriter/pngwriter.git
cd pngwriter-build
cmake -DCMAKE_INSTALL_PREFIX=$HOME/lib/pngwriter ~/src/pngwriter
make install -j8
cd $HOME

export CMAKE_PREFIX_PATH=$HOME/lib/pngwriter:$CMAKE_PREFIX_PATH
export LD_LIBRARY_PATH=$HOME/lib/pngwriter/lib:$LD_LIBRARY_PATH

# Load hdf5 - apt installs version 1.10.4
sudo apt install -y libhdf5-openmpi-dev

# Alternate installation if the package manager installation above doesnâ€™t
# work, usually indicated by an MPI related failure during execution.  The
# 2 PATHs at the end need to be un-commented in the profile as well if this
# installation is used.  This installs version 1.8.20

#cd ~/src
#curl -Lo hdf5-1.8.20.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.gz
#tar -xzf hdf5-1.8.20.tar.gz
#cd hdf5-1.8.20
#./configure --enable-parallel --enable-shared --prefix $HOME/lib/hdf5/ CC=mpicc CXX=mpic++
#make
#make install -j8
#cd $HOME

#export CMAKE_PREFIX_PATH=$HOME/lib/hdf5:$CMAKE_PREFIX_PATH
#export LD_LIBRARY_PATH=$HOME/lib/hdf5/lib:$LD_LIBRARY_PATH

# Load ADIOS2 - installs latest version
cd ~/src
git clone https://github.com/ornladios/ADIOS2.git ADIOS2
cd ADIOS2-build
cmake -DCMAKE_INSTALL_PREFIX="$HOME/lib/ADIOS2" -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_PNG=OFF -DADIOS2_USE_BZip2=OFF -DADIOS2_USE_SST=ON ~/src/ADIOS2
#cmake -DCMAKE_INSTALL_PREFIX="$HOME/lib/ADIOS2" -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_PNG=OFF -DADIOS2_USE_BZip2=OFF -DADIOS2_USE_SST=ON -ADIOS2_USE_HDF5=ON ~/src/ADIOS2
make install -j8
cd $HOME

export CMAKE_PREFIX_PATH=$HOME/lib/ADIOS2:$CMAKE_PREFIX_PATH
export LD_LIBRARY_PATH=$HOME/lib/ADIOS2/lib:$LD_LIBRARY_PATH

# Load openpmd - Loads openPMD version 0.15.0
cd ~/src
git clone https://github.com/openPMD/openPMD-api.git
cd openPMD-api-build
cmake -DCMAKE_INSTALL_PREFIX=$HOME/lib/openPMD-api -DopenPMD_USE_MPI=ON -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_HDF5=ON ~/src/openPMD-api
make install -j8
cd $HOME

export CMAKE_PREFIX_PATH=$HOME/lib/openPMD-api:$CMAKE_PREFIX_PATH
export LD_LIBRARY_PATH=$HOME/lib/openPMD-api/lib:$LD_LIBRARY_PATH

export TBG_SUBMIT="bash"
export TBG_TPLFILE="etc/picongpu/bash/mpirun.tpl"

BASH_COMP_FILE=$PICSRC/bin/picongpu-completion.bash
if [ -f $BASH_COMP_FILE ] ; then
    source $BASH_COMP_FILE
else
    echo "bash completion file '$BASH_COMP_FILE' not found." >&2
fi

echo Dependencies install is done.  PIC_BACKEND = $PIC_BACKEND

# Some notes
#

#Testing commands
#cmake --version
#gcc --version
#mpiexec --version
#mpirun --version
#mpiexec -n 4 hostname
#nvidia-smi
#nvidia-settings
#nvcc -V
#watch -n 1 nvidia-smi
#cat /usr/include/boost/version.hpp | grep "BOOST_LIB_VERSION"
#dpkg -s libboost-dev | grep 'Version'
#dpkg -l | grep hdf5
#OpenMP version can be checked with:
#echo |cpp -fopenmp -dM |grep -i open
# A return of: #define _OPENMP 201511 means OpenMP is version 4.5, see https://stackoverflow.com/questions/1304363/how-to-check-the-version-of-openmp-on-linux

#Reference the compiler; Use the commands below to set a specific gcc version (version 8 is set in this example)
#sudo apt install -y gcc-8 g++-8 build-essential
#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8
#For info on setting up a way to select from a list of compilers, see:
#https://linuxconfig.org/how-to-switch-between-multiple-gcc-and-g-compiler-versions-on-ubuntu-20-04-lts-focal-fossa

#Install CUDA Toolkit v11 latest:
#https://developer.nvidia.com/cuda-downloads
#Step through the selections for Linux, X86_64, Ubuntu, 20.04, runfile (local)
#Execute the 2 instructions to install (select driver and toolkit or just toolkit, as needed)
#Click continue when the warning appears
#Scroll to the bottom of the user agreement, type accept then enter
#When the little GUI is presented, un-check everything except CUDA Toolkit and then highlight install and click enter

#Temporarily set the CUDA Toolkit (v11.6) path with:
#export PATH=/usr/local/cuda-11.6/bin${PATH:+:${PATH}

#Make the CUDA Toolkit path permanent with the following:
#sudo su
#echo "export PATH=/usr/local/cuda-11.6/bin${PATH:+:${PATH}}" >> /etc/profile
#reboot

#To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-11.6/bin

#If an alias for python3 is needed:
#echo "alias python='python3'" >> .bashrc
#source .bashrc

#Uninstall Boost
#sudo apt autopurge $(dpkg -l | grep boost | grep 1.71 | awk '{print $2}')

