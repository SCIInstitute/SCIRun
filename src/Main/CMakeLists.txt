#
#  For more information, please see: http://software.sci.utah.edu
#
#  The MIT License
#
#  Copyright (c) 2015 Scientific Computing and Imaging Institute,
#  University of Utah.
#
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#

SET(SCIRunMain_SOURCES
  scirunMain.cc
)

IF(BUILD_HEADLESS)
  ADD_DEFINITIONS(-DBUILD_HEADLESS)
ENDIF(BUILD_HEADLESS)

ADD_DEFINITIONS(-DAPPLICATION_NAME=${APPLICATION_NAME})

IF(BUILD_HEADLESS)
  SET(BUILD_BUNDLE FALSE)
ENDIF()

IF(APPLE)
  IF(${MACDEPLOYQT} MATCHES "NOTFOUND" OR ${SED} MATCHES "NOTFOUND" OR ${AWK} MATCHES "NOTFOUND")
    SET(BUILD_BUNDLE FALSE)
    MESSAGE(WARNING "macdeployqt, sed and awk are required to build the SCIRun app bundle. Please ensure that all are installed and in your path.")
  ENDIF()
ENDIF()

IF(APPLE)
  MESSAGE(STATUS "Build Mac bundle: ${BUILD_BUNDLE}")
  IF(BUILD_BUNDLE)
    ADD_SUBDIRECTORY(osx_bundle)
  ENDIF()
ENDIF()

IF(APPLE)
  # TODO: temporary - until testing can be configured with app bundle
  ADD_EXECUTABLE(${TEST_APPLICATION_NAME}
    ${SCIRunMain_SOURCES}
  )

  IF(BUILD_HEADLESS)
    ADD_EXECUTABLE(${APPLICATION_NAME}
      ${SCIRunMain_SOURCES}
    )
  ENDIF()

ELSEIF(WIN32)
  # TODO: windows headless mode?

  SET(SCIRunMain_SOURCES ${SCIRunMain_SOURCES} "${APPLICATION_WINDOWS_RC}")
  IF(SCIRUN_SHOW_CONSOLE)
    ADD_DEFINITIONS(-DSCIRUN_SHOW_CONSOLE=1)
  ENDIF()

  ADD_EXECUTABLE(${APPLICATION_NAME} WIN32 ${SCIRunMain_SOURCES})

  # TODO: probably need this for Xcode
  IF(WIN32 AND MSVC)
    # TODO: more build types to be supported?
    # TODO: change $<CONFIGURATION> to $<CONFIG> when upgrading to cmake 3
    ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
      POST_BUILD
      COMMAND ${CMAKE_COMMAND}
      ARGS -E copy_directory
      ${SCIRun_BINARY_DIR}/Shaders
      ${SCIRun_BINARY_DIR}/$<CONFIGURATION>/Shaders
    )
    ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
      POST_BUILD
      COMMAND ${CMAKE_COMMAND}
      ARGS -E copy_directory
      ${SCIRun_BINARY_DIR}/Fonts
      ${SCIRun_BINARY_DIR}/$<CONFIGURATION>/Fonts
   )
   ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
     POST_BUILD
     COMMAND ${CMAKE_COMMAND}
     ARGS -E copy_directory
     ${SCIRun_BINARY_DIR}/Assets
     ${SCIRun_BINARY_DIR}/$<CONFIGURATION>/Assets
    )
ENDIF()

ELSE()
  ADD_EXECUTABLE(${APPLICATION_NAME} ${SCIRunMain_SOURCES})
ENDIF()

IF(APPLE)
  SET(APPS ${TEST_APPLICATION_NAME})
  IF(BUILD_HEADLESS)
    LIST(APPEND APPS ${APPLICATION_NAME})
  ENDIF()
ELSE()
  SET(APPS ${APPLICATION_NAME})
ENDIF()

FOREACH(app ${APPS})
  TARGET_LINK_LIBRARIES(${app}
    Core_Util_Legacy
  )

  IF(BUILD_HEADLESS)
    TARGET_LINK_LIBRARIES(${app}
      Core_ConsoleApplication
    )
  ELSE()
    TARGET_LINK_LIBRARIES(${app}
      Interface_Application
    )
  ENDIF()

  IF(BUILD_WITH_PYTHON)
    TARGET_LINK_LIBRARIES(${app}
      Core_Python
    )
  ENDIF()
ENDFOREACH()


IF(APPLE)
  IF(${CMAKE_GENERATOR} MATCHES "Xcode")
    SET(SCIRUN_LIB_DIR ${SCIRun_BINARY_DIR}/lib/$<CONFIGURATION>)
  ELSE()
    SET(SCIRUN_LIB_DIR ${SCIRun_BINARY_DIR}/lib)
  ENDIF()
ENDIF()


IF(APPLE)

ELSE()
  IF(WIN32)
    IF(BUILD_WITH_PYTHON)
      # TODO: change $<CONFIGURATION> to $<CONFIG> when upgrading to cmake 3
      # TODO: copy python dll
      ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} ARGS -E make_directory $<CONFIGURATION>/${PYTHON_MODULE_SEARCH_PATH}
        COMMAND ${CMAKE_COMMAND} ARGS -E copy_directory ${SCI_PYTHON_MODULE_LIBRARY_PATH} $<CONFIGURATION>/${PYTHON_MODULE_SEARCH_PATH}
        WORKING_DIRECTORY ${SCIRun_BINARY_DIR})
    ENDIF()

  	IF(NOT BUILD_HEADLESS)
      # Note: installer is created from Release build only!
	  IF(QT5_BUILD)
	    GET_TARGET_PROPERTY(QTCORENAME Qt5::Core LOCATION)
	    GET_TARGET_PROPERTY(QTGUINAME Qt5::Gui LOCATION)
	    GET_TARGET_PROPERTY(QTOPENGLNAME Qt5::OpenGL LOCATION)
	    GET_TARGET_PROPERTY(QTWIDGETSNAME Qt5::Widgets LOCATION)
	    GET_TARGET_PROPERTY(QTNETWORKNAME Qt5::Network LOCATION)
  	    GET_TARGET_PROPERTY(QTCONCURRENTNAME Qt5::Concurrent LOCATION)
		GET_TARGET_PROPERTY(QTSVGNAME Qt5::Svg LOCATION)
		GET_TARGET_PROPERTY(QTPRINTSUPPORTNAME Qt5::PrintSupport LOCATION)
	  ELSE()
	    GET_FILENAME_COMPONENT(QTCORENAME ${QT_QTCORE_LIBRARY_RELEASE} NAME_WE)
	    GET_FILENAME_COMPONENT(QTGUINAME ${QT_QTGUI_LIBRARY_RELEASE} NAME_WE)
	    GET_FILENAME_COMPONENT(QTOPENGLNAME ${QT_QTOPENGL_LIBRARY_RELEASE} NAME_WE)
	    GET_FILENAME_COMPONENT(QTNETWORKNAME ${QT_QTNETWORK_LIBRARY_RELEASE} NAME_WE)
	    GET_FILENAME_COMPONENT(QTSVGNAME ${QT_QTSVG_LIBRARY_RELEASE} NAME_WE)
	  ENDIF()
    ENDIF()
      INSTALL(TARGETS ${APPLICATION_NAME} RUNTIME DESTINATION bin)
  	IF(NOT BUILD_HEADLESS)
	  IF(QT5_BUILD)
	    INSTALL(PROGRAMS
	      ${QTCORENAME}
          ${QTGUINAME}
          ${QTOPENGLNAME}
          ${QTNETWORKNAME}
		  ${QTWIDGETSNAME}
		  ${QTCONCURRENTNAME}
		  ${QTSVGNAME}
		  ${QTPRINTSUPPORTNAME}
		  DESTINATION bin)
		INSTALL(PROGRAMS "${SCI_QWT_LIBRARY_DIR}/Release/${SCI_QWT_LIBRARY}.dll" DESTINATION bin CONFIGURATIONS Release)
		INSTALL(PROGRAMS "${Qt5_PATH}/plugins/platforms/qwindows.dll" DESTINATION bin/platforms CONFIGURATIONS Release)
	  ELSE()
        INSTALL(PROGRAMS
          ${QT_BINARY_DIR}/${QTCORENAME}.dll
          ${QT_BINARY_DIR}/${QTGUINAME}.dll
          ${QT_BINARY_DIR}/${QTOPENGLNAME}.dll
          ${QT_BINARY_DIR}/${QTNETWORKNAME}.dll
		  ${QT_BINARY_DIR}/${QTSVGNAME}.dll
          DESTINATION bin)
	  ENDIF()
  	ENDIF()
      IF(BUILD_WITH_PYTHON)
        INSTALL(PROGRAMS
          ${SCI_PYTHON_DLL_PATH}
          DESTINATION bin)
        INSTALL(DIRECTORY "${SCI_PYTHON_MODULE_LIBRARY_PATH}/" DESTINATION bin/${PYTHON_MODULE_SEARCH_PATH})
      ENDIF()

      IF(BUILD_WITH_PYTHON)
        INSTALL(PROGRAMS
          ${SCI_PYTHON_DLL_PATH}
          DESTINATION bin)
        INSTALL(DIRECTORY "${SCI_PYTHON_MODULE_LIBRARY_PATH}/" DESTINATION bin/${PYTHON_MODULE_SEARCH_PATH})
      ENDIF()

      INSTALL(DIRECTORY "${SCIRun_BINARY_DIR}/Shaders" DESTINATION bin USE_SOURCE_PERMISSIONS)
      INSTALL(DIRECTORY "${SCIRun_BINARY_DIR}/Assets" DESTINATION bin USE_SOURCE_PERMISSIONS)
      INSTALL(DIRECTORY "${SCIRun_BINARY_DIR}/Fonts" DESTINATION bin USE_SOURCE_PERMISSIONS)
  ELSE()
    IF(BUILD_HEADLESS)
      MESSAGE(STATUS "Building headless SCIRun")
    ENDIF()

    IF(BUILD_WITH_PYTHON)
      ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} ARGS -E make_directory ${PYTHON_MODULE_SEARCH_PATH}
        COMMAND ${CMAKE_COMMAND} ARGS -E copy_directory ${SCI_PYTHON_MODULE_LIBRARY_PATH} ${PYTHON_MODULE_SEARCH_PATH}
        WORKING_DIRECTORY ${SCIRun_BINARY_DIR})
      IF(SCI_PYTHON_64BIT_MODULE_LIBRARY_PATH AND EXISTS ${SCI_PYTHON_64BIT_MODULE_LIBRARY_PATH})
        ADD_CUSTOM_COMMAND(TARGET ${APPLICATION_NAME}
          POST_BUILD
          COMMAND ${CMAKE_COMMAND} ARGS -E copy_directory  ${SCI_PYTHON_64BIT_MODULE_LIBRARY_PATH} ${PYTHON_MODULE_SEARCH_PATH}
          WORKING_DIRECTORY ${SCIRun_BINARY_DIR})
      ENDIF()
    ENDIF()
  ENDIF()
ENDIF()

SET(NETWORKS_DESTINATION_DIR  "./SCIRunNetworks")

# TODO: be careful of SCIRun network file extension
# TODO: refactor when networks are reorganized
INSTALL(DIRECTORY "${SCIRun_SOURCE_DIR}/ExampleNets/regression" DESTINATION ${NETWORKS_DESTINATION_DIR}
  USE_SOURCE_PERMISSIONS FILES_MATCHING PATTERN "*.srn5")

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
